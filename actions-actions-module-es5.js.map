{"version":3,"sources":["webpack:///src/app/Pages/to-do/actions/actions.page.html","webpack:///src/app/Pages/to-do/actions/actions-routing.module.ts","webpack:///src/app/Pages/to-do/actions/actions.module.ts","webpack:///src/app/Pages/to-do/actions/actions.page.scss","webpack:///src/app/Pages/to-do/actions/actions.page.ts"],"names":["routes","path","component","ActionsPageRoutingModule","imports","forChild","exports","ActionsPageModule","declarations","ActionsPage","modalCtrl","actionsService","popoverController","timeService","selected","getSelecView","catagories","edit","reorderCat","dayRefresh","i","length","setSelecView","srtBy","getSrt","updateCurrent","actions","getActions","passed","properties","name","undefined","deadline","catagory","console","log","itemEditing","create","cssClass","swipeToClose","backdropDismiss","componentProps","modal","onDidDismiss","then","dataReturnded","present","ev","event","translucent","popover","popOpn","window","setInterval","clearInterval","action","deleteAction","moveAction","detail","from","to","complete","cata","pos","indexOf","moveCatagory","date","dateToDay","cat","filtered","filter","x","dateToDisplay","selector","template"],"mappings":"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","file":"actions-actions-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color='primary'>\\n    <ion-title>Actions</ion-title>\\n    <ion-buttons *ngIf=\\\"this.srtBy === 'custom'\\\" slot=\\\"end\\\">\\n      <ion-button (click)='editAct()'>Move items</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-toolbar mode='ios'>\\n    <ion-segment (ionChange)='dayRefresh()' style=\\\"width: 90%;\\\" [(ngModel)]='selected' value=\\\"day\\\">\\n\\n      <ion-segment-button value=\\\"day\\\" layout=\\\"icon-start\\\">\\n        <ion-icon name=\\\"today-outline\\\"></ion-icon>\\n        <ion-label>Day</ion-label> \\n      </ion-segment-button>\\n\\n      <ion-segment-button value=\\\"week\\\" layout='icon-start'>\\n        <ion-icon name=\\\"calendar-outline\\\"></ion-icon>\\n        <ion-label>Week</ion-label>\\n      </ion-segment-button>\\n      \\n      <ion-segment-button value=\\\"all\\\" layout='icon-start'>\\n        <ion-icon name=\\\"list-outline\\\"></ion-icon>\\n        <ion-label>All</ion-label>\\n      </ion-segment-button>\\n      \\n    </ion-segment>\\n\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"presentPopover($event)\\\">\\n        <!--<ion-label>Sort</ion-label>-->\\n        <ion-icon background='primary' size='medium' name=\\\"swap-vertical-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n\\n<!-- THIS PART IS SHOWN WHEN NOT SORTING BY CATAGORY -->\\n  <ion-reorder-group *ngIf=\\\"this.srtBy !== 'catagory'; else mainElse\\\" (ionItemReorder)='doReorder($event)' [disabled]='!edit'>\\n    <div *ngFor=\\\"let action of actions\\\">\\n        <!-- this section is if the the user has selected to edit the order of there actions-->\\n      <ion-reorder *ngIf=\\\"edit === true; else elseBlock\\\">\\n        <ion-item>\\n          <ion-label>\\n            <h6>{{action.name}}</h6>\\n            <p>Catagory - {{action.catagory}}</p>\\n            <p>Deadline - {{this.dateToDisplay(action.deadline)}}</p>\\n          </ion-label>\\n          <ion-icon name=\\\"reorder-three-outline\\\"></ion-icon>\\n        </ion-item>\\n      </ion-reorder>\\n\\n      <ng-template #elseBlock>\\n        <ion-item-sliding>\\n          <ion-item lines='full' class=\\\"action\\\">\\n            <ion-label>\\n              <h6>{{action.name}}</h6>\\n              <p>Catagory - {{action.catagory}}</p>\\n              <p>Deadline - {{this.dateToDisplay(action.deadline)}}</p>\\n            </ion-label>\\n  \\n            <ion-checkbox slot=\\\"end\\\" [(ngModel)]=\\\"action.completed\\\"></ion-checkbox>\\n          </ion-item>\\n  \\n          <ion-item-options>\\n            <ion-item-option (click)='showModal(action)' color=\\\"secondary\\\">\\n              <ion-icon slot=\\\"icon-only\\\" name=\\\"create-outline\\\"></ion-icon>\\n            </ion-item-option>\\n\\n            <ion-item-option (click)='deleteAction(action)' color=\\\"danger\\\">\\n              <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n            </ion-item-option>\\n          </ion-item-options>\\n        </ion-item-sliding>\\n      </ng-template>\\n\\n    </div>\\n  </ion-reorder-group>\\n\\n<!-- THIS PART IS SHOWN WHEN YOU ARE SORTING BY CATAGORY -->\\n  <ng-template #mainElse>\\n    <div *ngFor=\\\"let cat of this.catagories\\\">\\n\\n      <ion-list *ngIf=\\\"checkCatFull(cat)\\\">\\n        \\n        <ion-list-header>\\n          <ion-label>{{ cat }}</ion-label>\\n          <ion-button (click)=\\\"reorderCatFun(cat)\\\" >Order</ion-button>\\n        </ion-list-header>\\n\\n          \\n        <ion-reorder-group (ionItemReorder)='moveCatPos(cat, $event)' [disabled]='!checkRe(cat)'>\\n          <div *ngFor=\\\"let action of actions\\\">\\n            <div *ngIf=\\\"action.catagory === cat\\\">\\n              <ion-reorder *ngIf=\\\"checkRe(cat); else notReorder\\\">\\n                <ion-item >\\n                  <ion-label>\\n                    <h6>{{action.name}}</h6>\\n                    <p>Deadline - {{this.dateToDisplay(action.deadline)}}</p>\\n                  </ion-label>\\n                  <ion-icon name=\\\"reorder-three-outline\\\"></ion-icon>\\n                </ion-item>\\n              </ion-reorder>\\n            </div>\\n          \\n            \\n            <ng-template #notReorder>\\n              <ion-item-sliding *ngIf=\\\"action.catagory === cat\\\">\\n                <ion-item lines='full' class=\\\"action\\\">\\n                  <ion-label>\\n                    <h6>{{action.name}}</h6>\\n                    <p>Deadline - {{this.dateToDisplay(action.deadline)}}</p>\\n                  </ion-label>\\n                  \\n                  <ion-checkbox slot=\\\"end\\\" [(ngModel)]=\\\"action.completed\\\"></ion-checkbox>\\n                </ion-item>\\n                \\n                <ion-item-options>\\n                  <ion-item-option (click)='showModal(action)' color=\\\"secondary\\\">\\n                    <ion-icon slot=\\\"icon-only\\\" name=\\\"create-outline\\\"></ion-icon>\\n                  </ion-item-option>\\n                  \\n                  <ion-item-option (click)='deleteAction(action)' color=\\\"danger\\\">\\n                    <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n                  </ion-item-option>\\n                </ion-item-options>\\n                \\n              </ion-item-sliding>\\n            </ng-template>\\n          \\n          </div>\\n        </ion-reorder-group>\\n      </ion-list>\\n\\n    </div>\\n    </ng-template>\\n\\n    \\n  <!--This creates a square so that the button does not cover important infomation-->\\n  <div style=\\\"height: 80px\\\"></div>\\n  <!--Button to add a new action-->\\n  <ion-fab (click)='showModal(\\\"new\\\")' vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n    <ion-fab-button>\\n      <ion-icon name=\\\"add\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ActionsPage } from './actions.page';\nimport { ModalController } from '@ionic/angular';\nimport { AddModalPage } from '../../add-modal/add-modal.page';\nimport { AddActionPageModule } from '../../add-action/add-action.module';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ActionsPage\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ActionsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ActionsPageRoutingModule } from './actions-routing.module';\n\nimport { ActionsPage } from './actions.page';\nimport { AddActionPageModule } from '../../add-action/add-action.module';\nimport { PopOverPageModule } from '../../pop-over/pop-over.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ActionsPageRoutingModule,\n    AddActionPageModule,\n    PopOverPageModule\n  ],\n  declarations: [ActionsPage]\n})\nexport class ActionsPageModule {}\n","export default \".addButton {\\n  bottom: 0;\\n  right: 0;\\n  position: fixed;\\n  z-index: 10;\\n  margin: 0px 10px 10px 10px;\\n  --border-radius: 500px;\\n  --padding-end: 0px;\\n  --padding-start: 0px;\\n  height: 50px;\\n  width: 60px;\\n}\\n.addButton ion-icon {\\n  font-size: larger;\\n}\\nion-list-header {\\n  text-transform: capitalize;\\n  font-weight: bolder;\\n  font-size: larger;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvUGFnZXMvdG8tZG8vYWN0aW9ucy9hY3Rpb25zLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNJLFNBQUE7RUFDQSxRQUFBO0VBQ0EsZUFBQTtFQUNBLFdBQUE7RUFDQSwwQkFBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSxvQkFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0FBREo7QUFFSTtFQUNJLGlCQUFBO0FBQVI7QUFJQTtFQUNJLDBCQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtBQURKIiwiZmlsZSI6InNyYy9hcHAvUGFnZXMvdG8tZG8vYWN0aW9ucy9hY3Rpb25zLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4uYWRkQnV0dG9ue1xuICAgIGJvdHRvbTogMDtcbiAgICByaWdodDogMDtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgei1pbmRleDogMTA7XG4gICAgbWFyZ2luOiAwcHggMTBweCAxMHB4IDEwcHg7XG4gICAgLS1ib3JkZXItcmFkaXVzOiA1MDBweDtcbiAgICAtLXBhZGRpbmctZW5kOiAwcHg7XG4gICAgLS1wYWRkaW5nLXN0YXJ0OiAwcHg7XG4gICAgaGVpZ2h0OiA1MHB4O1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIGlvbi1pY29uIHtcbiAgICAgICAgZm9udC1zaXplOiBsYXJnZXI7XG4gICAgfSBcbn1cblxuaW9uLWxpc3QtaGVhZGVye1xuICAgIHRleHQtdHJhbnNmb3JtOmNhcGl0YWxpemU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgICBmb250LXNpemU6IGxhcmdlcjtcbn1cblxuIl19 */\";","import { Component, OnInit} from '@angular/core';\n\nimport { Action } from '../item.model';\nimport { ModalController, PopoverController} from '@ionic/angular';\nimport { AddActionPage } from '../../add-action/add-action.page';\nimport { ActionsService } from 'src/app/Services/actions.service';\nimport { PopOverPage } from '../../pop-over/pop-over.page';\nimport { TimeService } from 'src/app/Services/time.service';\nimport { __core_private_testing_placeholder__ } from '@angular/core/testing';\n\n\n@Component({\n  selector: 'app-actions',\n  templateUrl: './actions.page.html',\n  styleUrls: ['./actions.page.scss'],\n})\nexport class ActionsPage implements OnInit {\n\n  actions: Action [];\n  properties: object;\n  selected = this.actionsService.getSelecView();\n  srtBy: string;\n  catagories = this.actionsService.catagories;\n\n  edit = false;\n  reorderCat: boolean[] = [];\n\n  constructor(\n    private modalCtrl: ModalController,\n    private actionsService: ActionsService,\n    private popoverController: PopoverController,\n    private timeService: TimeService,\n    ) { }\n\n  ngOnInit() {\n    this.dayRefresh();\n\n  // creates the reorderCat array full of falses for how many catagories there are used to reorder catagories\n    for (let i = 0; i < this.catagories.length; i++) {\n      this.reorderCat[i] = false;\n    }\n  }\n\n  ionViewWillEnter() {\n    this.dayRefresh();\n  }\n\n  // essentioally resfreshes the page\n  dayRefresh() {\n    this.actionsService.setSelecView(this.selected);\n    this.srtBy = this.actionsService.getSrt();\n    this.actionsService.updateCurrent();\n    this.actions = this.actionsService.getActions();\n  }\n\n\n  // the code to pop up the add modal when the add button is pressed\n  async showModal(passed: any) {\n    // this if else sets the data before going into the modal depending on if it is an edit or not\n    if (passed === 'new') {\n      this.properties = {\n        name: undefined,\n        deadline: undefined,\n        catagory: 'None',\n        edit: false\n      };\n    } else {\n      console.log('deadline', passed.deadline);\n      this.properties = {\n        name: passed.name,\n        deadline: passed.deadline,\n        catagory: passed.catagory,\n        edit: true,\n        itemEditing: passed\n      };\n    }\n    const modal = await this.modalCtrl.create({\n      component: AddActionPage,\n      cssClass: 'add-modal-class',\n      swipeToClose: true,\n      backdropDismiss: true,\n      componentProps: this.properties\n    });\n\n    modal.onDidDismiss().then((dataReturnded) => {\n      this.dayRefresh();\n    });\n\n    return await modal.present();\n  }\n\n  // code to show the popover to select how you want to sort the actions\n  async presentPopover(ev: any) {\n    const popover = await this.popoverController.create({\n      component: PopOverPage,\n      cssClass: 'my-custom-class',\n      event: ev,\n      translucent: true\n    });\n\n    const popOpn = window.setInterval(() => {\n      this.actionsService.updateCurrent();\n      this.dayRefresh();\n    }, 100);\n\n    popover.onDidDismiss().then((dataReturnded) => {\n      clearInterval(popOpn);\n      this.srtBy = this.actionsService.getSrt();\n    });\n\n    return await popover.present();\n  }\n\n  // function that deleltes the action you pass in from thw the actions array\n  deleteAction(action: Action ) {\n    this.actionsService.deleteAction(action);\n    this.dayRefresh();\n  }\n\n  doReorder(ev: any) {\n    // The `from` and `to` properties contain the index of the item\n    // when the drag started and ended, respectively\n    this.actionsService.moveAction(ev.detail.from, ev.detail.to);\n\n    // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. This method can also be called directly\n    // by the reorder group\n    ev.detail.complete();\n  }\n\n  editAct() {\n    this.edit = !this.edit;\n    console.log(this.edit);\n  }\n\n//////////////// THIS STUFF IS FOR REORDING AND PRIORITSING WHEN IN THE CATAGORY VIEW ////////////////////////////\n\n  // runs when the reorder button is pressed for a catagory\n  reorderCatFun(cata: string) {\n    const pos = this.catagories.indexOf(cata);\n    this.reorderCat[pos] = !this.reorderCat[pos];\n  }\n\n  // checks wehter the catagory should be in the reorder state or not\n  checkRe(cata: string) {\n    const pos = this.catagories.indexOf(cata);\n    return this.reorderCat[pos];\n  }\n\n\n  moveCatPos(cata: string, ev: any) {\n    // The `from` and `to` properties contain the index of the item\n    // when the drag started and ended, respectively\n\n    this.actionsService.moveCatagory(cata, ev.detail.from, ev.detail.to);\n\n    // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. This method can also be called directly\n    // by the reorder group\n    ev.detail.complete();\n    this.dayRefresh();\n  }\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  dateToDay(date: string) {\n    return this.timeService.dateToDay(date);\n  }\n\n  checkCatFull(cat: string) {\n    const filtered = this.actions.filter(x => {\n      return x.catagory === cat;\n    });\n    return (filtered.length > 0);\n  }\n\n  dateToDisplay(date: string) {\n    return (this.timeService.dateToDisplay(date));\n  }\n\n}\n"]}